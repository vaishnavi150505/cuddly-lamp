import java.util.*;

public class CycleDetection {
    private final int vertices;
    private final LinkedList<Integer>[] adjList;

    public CycleDetection(int vertices) {
        this.vertices = vertices;
        adjList = new LinkedList[vertices];
        for (int i = 0; i < vertices; i++) {
            adjList[i] = new LinkedList<>();
        }
    }

    public void addEdge(int start, int end) {
        adjList[start].add(end);
        adjList[end].add(start);
    }

    private boolean isCyclicUtil(int vertex, boolean[] visited, int parent) {
        visited[vertex] = true;
        Integer i;
        for (Integer adj : adjList[vertex]) {
            if (!visited[adj]) {
                if (isCyclicUtil(adj, visited, vertex))
                    return true;
            } else if (adj != parent)
                return true;
        }
        return false;
    }

    public boolean isCyclic() {
        boolean[] visited = new boolean[vertices];
        for (int i = 0; i < vertices; i++)
            if (!visited[i])
                if (isCyclicUtil(i, visited, -1))
                    return true;
        return false;
    }

    public static void main(String[] args) {
        CycleDetection graph = new CycleDetection(5);

        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(1, 3);
        graph.addEdge(3, 4);

        if (graph.isCyclic())
            System.out.println("Graph contains cycle");
        else
            System.out.println("Graph doesn't contain cycle");
    }
}
