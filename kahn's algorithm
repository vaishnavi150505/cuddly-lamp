import java.util.*;

public class KahnsAlgorithm {
    private final int vertices;
    private final LinkedList<Integer>[] adjList;

    public KahnsAlgorithm(int vertices) {
        this.vertices = vertices;
        adjList = new LinkedList[vertices];
        for (int i = 0; i < vertices; i++) {
            adjList[i] = new LinkedList<>();
        }
    }

    public void addEdge(int start, int end) {
        adjList[start].add(end);
    }

    public void topologicalSort() {
        int[] inDegree = new int[vertices];

        for (int i = 0; i < vertices; i++) {
            for (int adj : adjList[i]) {
                inDegree[adj]++;
            }
        }

        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < vertices; i++) {
            if (inDegree[i] == 0) {
                queue.add(i);
            }
        }

        int count = 0;
        List<Integer> topOrder = new ArrayList<>();
        while (!queue.isEmpty()) {
            int u = queue.poll();
            topOrder.add(u);

            for (int adj : adjList[u]) {
                if (--inDegree[adj] == 0) {
                    queue.add(adj);
                }
            }
            count++;
        }

        if (count != vertices) {
            System.out.println("There exists a cycle in the graph.");
        } else {
            topOrder.forEach(v -> System.out.print(v + " "));
        }
    }

    public static void main(String[] args) {
        KahnsAlgorithm graph = new KahnsAlgorithm(6);
        graph.addEdge(5, 2);
        graph.addEdge(5, 0);
        graph.addEdge(4, 0);
        graph.addEdge(4, 1);
        graph.addEdge(2, 3);
        graph.addEdge(3, 1);

        System.out.println("Topological Sort using Kahn's Algorithm:");
        graph.topologicalSort();
    }
}
