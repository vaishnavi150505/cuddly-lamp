import java.util.Map;
import java.util.TreeMap;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Vector;

class BinaryTree {
    Node root;

    class Pair {
        int horizontalDistance;
        Node node;

        Pair(int hd, Node n) {
            horizontalDistance = hd;
            node = n;
        }
    }

    void verticalOrder(boolean topToBottom) {
        if (root == null) {
            return;
        }

        Map<Integer, Vector<Integer>> map = new TreeMap<>();
        Queue<Pair> queue = new LinkedList<>();

        queue.add(new Pair(0, root));

        while (!queue.isEmpty()) {
            Pair temp = queue.poll();
            int hd = temp.horizontalDistance;
            Node node = temp.node;

            if (!map.containsKey(hd)) {
                map.put(hd, new Vector<>());
            }
            map.get(hd).add(node.value);

            if (node.left != null) {
                queue.add(new Pair(hd - 1, node.left));
            }

            if (node.right != null) {
                queue.add(new Pair(hd + 1, node.right));
            }
        }

        if (topToBottom) {
            for (Map.Entry<Integer, Vector<Integer>> entry : map.entrySet()) {
                for (int val : entry.getValue()) {
                    System.out.print(val + " ");
                }
                System.out.println();
            }
        } else {
            for (Map.Entry<Integer, Vector<Integer>> entry : map.entrySet()) {
                Vector<Integer> vector = entry.getValue();
                for (int i = vector.size() - 1; i >= 0; i--) {
                    System.out.print(vector.get(i) + " ");
                }
                System.out.println();
            }
        }
    }

    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);

        System.out.println("Vertical order traversal (Top to Bottom) of binary tree is ");
        tree.verticalOrder(true);

        System.out.println("Vertical order traversal (Bottom to Top) of binary tree is ");
        tree.verticalOrder(false);
    }
}
