class BinaryTree {
    Node root;

    void printBoundaryLeft(Node node) {
        if (node == null) {
            return;
        }

        if (node.left != null) {
            System.out.print(node.value + " ");
            printBoundaryLeft(node.left);
        } else if (node.right != null) {
            System.out.print(node.value + " ");
            printBoundaryLeft(node.right);
        }
    }

    void printLeaves(Node node) {
        if (node == null) {
            return;
        }
        printLeaves(node.left);
        if (node.left == null && node.right == null) {
            System.out.print(node.value + " ");
        }
        printLeaves(node.right);
    }

    void printBoundaryRight(Node node) {
        if (node == null) {
            return;
        }

        if (node.right != null) {
            printBoundaryRight(node.right);
            System.out.print(node.value + " ");
        } else if (node.left != null) {
            printBoundaryRight(node.left);
            System.out.print(node.value + " ");
        }
    }

    void boundaryAntiClockwiseTraversal() {
        if (root == null) {
            return;
        }

        System.out.print(root.value + " ");

        printBoundaryLeft(root.left);
        printLeaves(root.left);
        printLeaves(root.right);
        printBoundaryRight(root.right);
    }

    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(6);
        tree.root.right.right = new Node(7);

        System.out.println("Boundary Anti-clockwise traversal of binary tree is ");
        tree.boundaryAntiClockwiseTraversal();
    }
}
