import java.util.*;

public class CycleDetectionDirectedGraph {
    private final int vertices;
    private final LinkedList<Integer>[] adjList;

    public CycleDetectionDirectedGraph(int vertices) {
        this.vertices = vertices;
        adjList = new LinkedList[vertices];
        for (int i = 0; i < vertices; i++) {
            adjList[i] = new LinkedList<>();
        }
    }

    public void addEdge(int start, int end) {
        adjList[start].add(end);
    }

    private boolean isCyclicUtil(int vertex, boolean[] visited, boolean[] recStack) {
        if (recStack[vertex])
            return true;
        if (visited[vertex])
            return false;

        visited[vertex] = true;
        recStack[vertex] = true;
        for (Integer adj : adjList[vertex]) {
            if (isCyclicUtil(adj, visited, recStack))
                return true;
        }
        recStack[vertex] = false;

        return false;
    }

    public boolean isCyclic() {
        boolean[] visited = new boolean[vertices];
        boolean[] recStack = new boolean[vertices];

        for (int i = 0; i < vertices; i++) {
            if (isCyclicUtil(i, visited, recStack))
                return true;
        }
        return false;
    }

    public static void main(String[] args) {
        CycleDetectionDirectedGraph graph = new CycleDetectionDirectedGraph(4);

        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(2, 0);
        graph.addEdge(2, 3);
        graph.addEdge(3, 3);

        if (graph.isCyclic())
            System.out.println("Graph contains cycle");
        else
            System.out.println("Graph doesn't contain cycle");
    }
}
